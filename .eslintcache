[{"/home/peace/workspace/dripdemofrontend/src/index.js":"1","/home/peace/workspace/dripdemofrontend/src/App.js":"2","/home/peace/workspace/dripdemofrontend/src/reportWebVitals.js":"3","/home/peace/workspace/dripdemofrontend/src/components/common/Header.js":"4","/home/peace/workspace/dripdemofrontend/src/constants/network.js":"5","/home/peace/workspace/dripdemofrontend/src/components/Trade.js":"6","/home/peace/workspace/dripdemofrontend/src/components/Stake.js":"7","/home/peace/workspace/dripdemofrontend/src/components/Liquidity.js":"8","/home/peace/workspace/dripdemofrontend/src/constants/addresses.js":"9"},{"size":497,"mtime":1645951281523,"results":"10","hashOfConfig":"11"},{"size":1365,"mtime":1645714183009,"results":"12","hashOfConfig":"11"},{"size":364,"mtime":1645612282109,"results":"13","hashOfConfig":"11"},{"size":1132,"mtime":1645952504483,"results":"14","hashOfConfig":"11"},{"size":3001,"mtime":1646003821725,"results":"15","hashOfConfig":"11"},{"size":891,"mtime":1645618299659,"results":"16","hashOfConfig":"11"},{"size":4570,"mtime":1645962532707,"results":"17","hashOfConfig":"11"},{"size":873,"mtime":1645621405769,"results":"18","hashOfConfig":"11"},{"size":190,"mtime":1646028525975,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xbo0o7",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peace/workspace/dripdemofrontend/src/index.js",[],["43","44"],"/home/peace/workspace/dripdemofrontend/src/App.js",["45","46"],"import React, { useState } from 'react';\nimport Header from './components/common/Header';\nimport { addNet, switchNet } from './constants/network';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  useRoutes\n} from \"react-router-dom\";\nimport Trade from './components/Trade';\nimport Stake from './components/Stake';\nimport Liquidity from './components/Liquidity';\n\nconst ScreenList = (props) => {\n  let routes = useRoutes([\n      { path: \"/trade\", element:<Trade/> },\n      { path: \"/stake\", element: <Stake account={props.account}/> },\n      { path: \"/Liquidity\", element: <Liquidity/> },\n  ]);\n  return routes;\n};\n\nfunction App() {\n  const [userAccount, setUserAccount] = useState();\n\n  async function requestAccount() {\n    await window.ethereum.request(addNet); // \n    try {\n      await window.ethereum.request(switchNet); // \n    } catch (err) {\n      console.log(err);\n    }\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });  // connect wallet\n      setUserAccount(account);\n    }\n  }\n  return (\n    <div className=\"bg-blue-100 h-screen\">\n      <div>\n        <BrowserRouter>\n          <Header account={userAccount} requestAccount={requestAccount}/>\n          <ScreenList account={userAccount} />\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/peace/workspace/dripdemofrontend/src/reportWebVitals.js",[],"/home/peace/workspace/dripdemofrontend/src/components/common/Header.js",["47"],"\nimport { Link } from 'react-router-dom';\nimport Button from \"@material-tailwind/react/Button\";\n\nconst Header = ({ account, requestAccount }) => {\n\n  function goLink(link) {\n\n  }\n  return (\n    <div className=\"bg-green-400 h-16\">\n      <div className=\"flex text-white p-2\">\n        {/* <div className=\"p-4\" onClick={goLink('goLink')}>\n          <Link to=\"/trade\">Trade</Link>\n        </div> */}\n        <div className=\"p-4\">\n          <Link to=\"/stake\">Stake</Link>\n        </div>\n        {/* <div className=\"p-4\">\n          <Link to=\"/Liquidity\">Liquidity</Link>\n        </div> */}\n        <div className=\"flex-grow\"></div>\n        <Button\n          onClick={requestAccount}\n          color=\"amber\"\n          buttonType=\"filled\"\n          size=\"regular\"\n          block={false}\n          iconOnly={false}\n          ripple=\"light\"\n        >\n          {\n            !account ? (\n              <div>Connect Wallet</div>\n            ) : (\n              <div>{`${account.substring(0, 5)}..${account.substring(account.length - 5)}`}</div>\n            )\n          }\n        </Button>\n      </div>\n    </div >\n  )\n}\n\nexport default Header;","/home/peace/workspace/dripdemofrontend/src/constants/network.js",[],"/home/peace/workspace/dripdemofrontend/src/components/Trade.js",["48"],"import react from 'react';\n\nconst Trade = () => {\n  return (\n    <div className=\"grid grid-cols-2 gap-1\">\n      <div className=\"bg-indigo-800 p-5 rounded-xl border border-white m-5 text-white h-56\">\n        <div>\n          Buy Drip\n        </div>\n        <div className=\"flex\">\n          <input type=\"text\" className=\"mt-4 h-10 w-1/2 text-black\"/>\n          <div className=\"border border-white pt-2 pl-4 h-10 mt-4 w-24 ml-8 cursor-pointer\">Buy</div>\n        </div>\n      </div>\n      <div className=\"bg-indigo-800 p-5 rounded-xl border border-white m-5 text-white h-56\">\n        <div>\n          Sell Drip\n        </div>\n        <div className=\"flex\">\n          <input type=\"text\" className=\"mt-4 h-10 w-1/2 text-black\"/>\n          <div className=\"border border-white pt-2 pl-4 h-10 mt-4 w-24 ml-8 cursor-pointer\">Sell</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Trade;","/home/peace/workspace/dripdemofrontend/src/components/Stake.js",["49"],"import { ethers } from 'ethers';\nimport { formatEther, parseEther } from 'ethers/lib/utils';\nimport { useEffect, useState } from 'react';\nimport { address } from '../constants/addresses';\nimport { network } from '../constants/network';\nimport Drip from '../contracts/DripToken.sol/DripToken.json';\nimport Faucet from '../contracts/FaucetV4.sol/FaucetV4.json';\nimport Input from \"@material-tailwind/react/Input\";\nimport Button from \"@material-tailwind/react/Button\";\nimport H3 from \"@material-tailwind/react/Heading3\";\nimport H6 from \"@material-tailwind/react/Heading6\";\n\nconst Stake = ({ account }) => {\n  const [amount, setAmount] = useState(0);\n  const [available, setAvailable] = useState(0);\n  const [staked, setStaked] = useState(0);\n  const [claimed, setClaimed] = useState(0);\n  const [maxPayouts, setMaxPayouts] = useState(0);\n\n  async function getInfos() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.JsonRpcProvider(network.rpcUrls[0]);\n      const faucet = new ethers.Contract(address['faucet'], Faucet.abi, provider);\n      try {\n        const availAmount = await faucet.payoutOf(String(account));\n        setAvailable(formatEther(availAmount[0]));\n        const userInfo = await faucet.userInfoTotals(String(account));\n        setStaked(formatEther(userInfo[1]));\n        const totalClaimed = await faucet.total_withdraw();\n        setClaimed(formatEther(totalClaimed));\n        setMaxPayouts(formatEther(availAmount[1]));\n      } catch (err) {\n        console.log(err);\n      }\n\n    }\n  }\n  useEffect(() => {\n    getInfos();\n  }, [account]);\n  async function deposit() {\n    try {\n      if (!account) {\n        window.alert(\"Connect Wallet !\");\n      } else {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const drip = new ethers.Contract(address['drip'], Drip.abi, signer);\n        // approve\n        await drip.approve(address['faucet'], parseEther(String(amount)));\n        drip.once(\"Approval\", async () => {\n          // stake\n          const faucet = new ethers.Contract(address['faucet'], Faucet.abi, signer);\n          const stakeTx = await faucet.deposit(parseEther(String(amount)));\n          await stakeTx.wait();\n          window.alert(\"Deposited!\");\n          getInfos();\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n  // claim\n  async function requestClaim() {\n    try {\n      if (!account) {\n        window.alert(\"Connect Wallet !\");\n      } else {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const faucet = new ethers.Contract(address['faucet'], Faucet.abi, signer);\n        const claimTx = await faucet.claim();\n        await claimTx.wait();\n        window.alert(\"Claimed!\");\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n  return (\n    <div className=\"grid grid-cols-2 gap-1 p-12\">\n      <div className=\"grid grid-cols-2 gap-1 p-12\">\n        <div>\n        <H6 color=\"blueGray\">Rewards</H6>\n          <div>{available} Drips</div>\n        </div>\n        <div>\n        <H6 color=\"blueGray\">Deposits</H6>\n          <div>{staked} Drips</div>\n        </div>\n        <div>\n        <H6 color=\"blueGray\">Claimed</H6>\n          <div>{claimed} Drips</div>\n        </div>\n        <div>\n        <H6 color=\"blueGray\">Max Payout</H6>\n          <div>{maxPayouts} Drips</div>\n        </div>\n      </div>\n      <div>\n        <div className=\"grid grid-cols-1 gap-2 p-5 rounded-xl border border-white m-5 text-white\">\n          <H3 color=\"lightBlue\">Deposit and Claim</H3>\n          <Input\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n            type=\"text\"\n            color=\"indigo\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"amount\"\n            className=\"text-white\"\n          />\n          <Button\n            onClick={deposit}\n            color=\"lightBlue\"\n            buttonType=\"filled\"\n            size=\"lg\"\n            rounded={false}\n            block={true}\n            iconOnly={false}\n            ripple=\"dark\"\n          >\n            Deposit\n          </Button>\n          <Button\n            onClick={requestClaim}\n            color=\"green\"\n            buttonType=\"filled\"\n            size=\"lg\"\n            rounded={false}\n            block={true}\n            iconOnly={false}\n            ripple=\"dark\"\n          >\n            Claim\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Stake;","/home/peace/workspace/dripdemofrontend/src/components/Liquidity.js",[],"/home/peace/workspace/dripdemofrontend/src/constants/addresses.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":6,"column":3,"nodeType":"56","messageId":"57","endLine":6,"endColumn":9},{"ruleId":"54","severity":1,"message":"58","line":7,"column":3,"nodeType":"56","messageId":"57","endLine":7,"endColumn":8},{"ruleId":"54","severity":1,"message":"59","line":7,"column":12,"nodeType":"56","messageId":"57","endLine":7,"endColumn":18},{"ruleId":"54","severity":1,"message":"60","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":40,"column":6,"nodeType":"63","endLine":40,"endColumn":15,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'Routes' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'goLink' is defined but never used.","'react' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInfos'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [account, getInfos]",{"range":"70","text":"71"},[1594,1603],"[account, getInfos]"]